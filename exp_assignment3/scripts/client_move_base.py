#!/usr/bin/env python
# license removed for brevity

import rospy

# Importa il SimpleActionClient
import actionlib
# Importa il file .action ed i messaggi usati dalla move base action
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

# "move_base_msgs" is the type of msg generated by the Movebase package 


# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# geometry_msgs/PoseStamped target_pose

def movebase_client():

   # Crea un action client chiamato "move_base" con action definition file "MoveBaseAction"
    client = actionlib.SimpleActionClient('move_base',MoveBaseAction)

   # Aspetta che l'action si sia avviato ed abbia iniziato ad essere ricettivo per i goal
    client.wait_for_server()

   # Crea un nuovo goal con il costruttore MoveBaseGoal
    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = "map"
    goal.target_pose.header.stamp = rospy.Time.now()
   # Muovere di 0.5 metri avanti lungo l'asse x del sistema di riferimento della mappa
    goal.target_pose.pose.position.x = 0.0
    goal.target_pose.pose.position.y = 0.0
    goal.target_pose.pose.orientation.w = 1.0

   # Invia il goal all'action server.
    client.send_goal(goal)
   # Aspetta che il server finisca di eseguire la richiesta
    wait = client.wait_for_result()
   # Se il risultato non arriva, assumiamo che il Server non sia disponibile
    if not wait:
        rospy.logerr("Action server not available!")
        rospy.signal_shutdown("Action server not available!")
    else:
    # Restituisce il risultato dell'esecuzione dell'action
        return client.get_result()   

# Se il nodo Python viene eseguito come processo principale (eseguito direttamente)
if __name__ == '__main__':
    try:
       # Inizializza un nodo rospy per permettere al SimpleActionClient di interagire in ROS
        rospy.init_node('client_move_base.py')
        result = movebase_client()
        if result:
            rospy.loginfo("Goal execution done!")
    except rospy.ROSInterruptException:
        rospy.loginfo("Navigation test finished.")

Abbiamo finito! Questo è un semplice esempio di nodo Python per inviare una posa desideata alla navigation stack per muovere un robot mobile. Come potete notare, per motivi di semplicità, essendo questo un tutorial base, non vengono sfruttati i meccanismi di feedback propri delle Actions ed il risultato non è indicativo del reale status del goal. Per avere un esempio più completo, vi consiglio la lettura del post “Inviare una sequenza di Goals alla ROS NavStack usando Python”.

Grazie per l’attenzione e a presto! :hibiscus:
Fiorella Sibona
Fiorella Sibona

Roboticist Wannabe
Tweet Share Share
Seguici su Facebook

Se vuoi rimanere in contatto con cnoi e riceveve aggiornamenti, seguici anche su Facebook
Newsletter

Iscriviti alla newsletter di HotBlack Robotics per rimanere aggiornato!
Newsletter

Iscriviti alla newsletter di HotBlack Robotics per rimanere aggiornato!

HotBlack Robotics © 2019

